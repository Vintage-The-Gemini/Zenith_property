import { useState, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'
import toast from 'react-hot-toast'
import {
  PhotoIcon,
  XMarkIcon,
  PlusIcon,
  MapIcon,
  HomeIcon,
  CurrencyDollarIcon,
  DocumentTextIcon,
  StarIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  Bars3Icon
} from '@heroicons/react/24/outline'
import { StarIcon as StarSolidIcon } from '@heroicons/react/24/solid'
import SEOManager from './admin/SEOManager'
import GoogleSearchPreview from './admin/GoogleSearchPreview'

const PropertyForm = ({ property = null, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    title: property?.title || '',
    description: property?.description || '',
    address: property?.location?.address || '',
    city: property?.location?.city || 'Nairobi',
    county: property?.location?.county || 'Nairobi',
    area: property?.location?.area || '',
    customArea: property?.location?.customArea || '',
    neighborhood: property?.location?.neighborhood || '',
    price: property?.price?.amount || '',
    currency: property?.price?.currency || 'KES',
    propertyType: property?.propertyType || 'apartment',
    category: property?.category || 'sale',
    bedrooms: property?.features?.bedrooms || 1,
    bathrooms: property?.features?.bathrooms || 1,
    areaSize: property?.features?.area?.size || '',
    areaUnit: property?.features?.area?.unit || 'sqft',
    yearBuilt: property?.yearBuilt || '',
    amenities: property?.amenities || [],
    status: property?.status || 'draft',
    featured: property?.featured || false,
    images: [], // Always start with empty array for new images
    virtualTourUrl: property?.virtualTourUrl || '',
    coordinates: property?.location?.coordinates ? { lat: property.location.coordinates.latitude, lng: property.location.coordinates.longitude } : { lat: '', lng: '' },
    contactAgent: property?.contactAgent || '',
    agentPhone: property?.agentPhone || '',
    agentEmail: property?.agentEmail || '',
    // EXTENSIVE SEO Fields
    seoTitle: property?.seo?.metaTitle || '',
    seoDescription: property?.seo?.metaDescription || '',
    seoKeywords: property?.seo?.keywords?.join(', ') || '',
    focusKeyword: property?.seo?.focusKeyword || '',
    seoSlug: property?.seo?.slug || '',
    canonicalUrl: property?.seo?.canonicalUrl || '',
    
    // Open Graph & Social Media
    ogTitle: property?.seo?.ogTitle || '',
    ogDescription: property?.seo?.ogDescription || '',
    ogImage: property?.seo?.ogImage || '',
    ogType: property?.seo?.ogType || 'website',
    
    // Twitter Card
    twitterTitle: property?.seo?.twitterTitle || '',
    twitterDescription: property?.seo?.twitterDescription || '',
    twitterImage: property?.seo?.twitterImage || '',
    twitterCard: property?.seo?.twitterCard || 'summary_large_image',
    
    // Advanced SEO
    metaRobots: property?.seo?.metaRobots || 'index,follow',
    priority: property?.seo?.priority || 0.8,
    changeFrequency: property?.seo?.changeFrequency || 'monthly',
    
    // Schema Markup
    schemaType: property?.seo?.schemaType || 'RealEstateListing',
    priceRange: property?.seo?.priceRange || '',
    
    // Content Optimization
    contentScore: 0,
    readabilityScore: 0,
    keywordDensity: 0,
    
    // SEO Analysis
    seoScore: 0,
    seoIssues: [],
    seoSuggestions: [],
    
    autoGenerateSEO: property?.seo?.autoGenerated !== false
  })

  const [newFeature, setNewFeature] = useState('')
  const [existingImages, setExistingImages] = useState([]) // Existing images from server
  const [newImages, setNewImages] = useState([]) // New images to upload
  const [imagePreview, setImagePreview] = useState([]) // Combined preview URLs
  const [primaryImageIndex, setPrimaryImageIndex] = useState(0)
  const [uploading, setUploading] = useState(false)
  const [saving, setSaving] = useState(false)
  const [draggedIndex, setDraggedIndex] = useState(null)
  const [dragOverIndex, setDragOverIndex] = useState(null)
  const [seoData, setSeoData] = useState(null)
  const fileInputRef = useRef()

  // Initialize existing images for editing
  useEffect(() => {
    if (property && property.images && property.images.length > 0) {
      // Sort existing images by order and isPrimary
      const sortedImages = [...property.images].sort((a, b) => {
        if (a.isPrimary && !b.isPrimary) return -1;
        if (!a.isPrimary && b.isPrimary) return 1;
        return (a.order || 0) - (b.order || 0);
      });
      
      setExistingImages(sortedImages);
      const imageUrls = sortedImages.map(img => img.url);
      setImagePreview(imageUrls);
      
      // Find primary image index
      const primaryIndex = sortedImages.findIndex(img => img.isPrimary);
      setPrimaryImageIndex(primaryIndex >= 0 ? primaryIndex : 0);
    } else {
      setExistingImages([]);
      setImagePreview([]);
      setPrimaryImageIndex(0);
    }
    setNewImages([]);
  }, [property])

  // Cleanup effect to prevent memory leaks
  useEffect(() => {
    return () => {
      // Clean up all blob URLs when component unmounts
      imagePreview.forEach(url => {
        if (url.startsWith('blob:')) {
          URL.revokeObjectURL(url)
        }
      })
    }
  }, [imagePreview])

  const propertyTypes = [
    { value: 'apartment', label: 'Apartment' },
    { value: 'house', label: 'House' },
    { value: 'villa', label: 'Villa' },
    { value: 'townhouse', label: 'Townhouse' },
    { value: 'land', label: 'Land' },
    { value: 'commercial', label: 'Commercial' },
    { value: 'office', label: 'Office' },
    { value: 'shop', label: 'Shop' }
  ]

  const propertyStatuses = [
    { value: 'draft', label: 'Draft' },
    { value: 'active', label: 'Active' },
    { value: 'sold', label: 'Sold' },
    { value: 'rented', label: 'Rented' },
    { value: 'inactive', label: 'Inactive' }
  ]

  const propertyCategories = [
    { value: 'sale', label: 'For Sale' },
    { value: 'rent', label: 'For Rent' },
    { value: 'lease', label: 'For Lease' }
  ]

  const currencies = [
    { value: 'KES', label: 'KES (Kenyan Shilling)' },
    { value: 'USD', label: 'USD (US Dollar)' },
    { value: 'EUR', label: 'EUR (Euro)' }
  ]

  const nairobiAreas = [
    // Premium Areas
    { value: 'Westlands', label: 'Westlands' },
    { value: 'Karen', label: 'Karen' },
    { value: 'Kileleshwa', label: 'Kileleshwa' },
    { value: 'Lavington', label: 'Lavington' },
    { value: 'Kilimani', label: 'Kilimani' },
    { value: 'Upperhill', label: 'Upperhill' },
    { value: 'Runda', label: 'Runda' },
    { value: 'Muthaiga', label: 'Muthaiga' },
    { value: 'Spring Valley', label: 'Spring Valley' },
    { value: 'Gigiri', label: 'Gigiri' },
    { value: 'Loresho', label: 'Loresho' },
    { value: 'Ridgeways', label: 'Ridgeways' },
    
    // Mid-Range Areas
    { value: 'Parklands', label: 'Parklands' },
    { value: 'Highridge', label: 'Highridge' },
    { value: 'Mountain View', label: 'Mountain View' },
    { value: 'Nyari', label: 'Nyari' },
    { value: 'Two Rivers', label: 'Two Rivers' },
    { value: 'Kyuna', label: 'Kyuna' },
    { value: 'Hurlingham', label: 'Hurlingham' },
    { value: 'Kirichwa Road', label: 'Kirichwa Road' },
    { value: 'Lower Kabete', label: 'Lower Kabete' },
    { value: 'Riverside', label: 'Riverside' },
    { value: 'Brookside', label: 'Brookside' },
    
    // Business & Central Areas
    { value: 'CBD', label: 'CBD (Central Business District)' },
    { value: 'Industrial Area', label: 'Industrial Area' },
    { value: 'South C', label: 'South C' },
    { value: 'South B', label: 'South B' },
    { value: 'Lang\'ata', label: 'Lang\'ata' },
    { value: 'Ngong Road', label: 'Ngong Road' },
    
    // Residential Areas
    { value: 'Garden Estate', label: 'Garden Estate' },
    { value: 'Kasarani', label: 'Kasarani' },
    { value: 'Roysambu', label: 'Roysambu' },
    { value: 'Thome', label: 'Thome' },
    { value: 'Zimmerman', label: 'Zimmerman' },
    { value: 'Pipeline', label: 'Pipeline' },
    { value: 'Embakasi', label: 'Embakasi' },
    { value: 'Donholm', label: 'Donholm' },
    { value: 'Umoja', label: 'Umoja' },
    { value: 'Komarock', label: 'Komarock' },
    { value: 'Kayole', label: 'Kayole' },
    { value: 'Githurai', label: 'Githurai' },
    
    // Satellite Towns
    { value: 'Ruaka', label: 'Ruaka' },
    { value: 'Banana', label: 'Banana' },
    { value: 'Limuru', label: 'Limuru' },
    { value: 'Kikuyu', label: 'Kikuyu' },
    { value: 'Ngong', label: 'Ngong' },
    { value: 'Rongai', label: 'Rongai' },
    { value: 'Kitengela', label: 'Kitengela' },
    { value: 'Syokimau', label: 'Syokimau' },
    { value: 'Mlolongo', label: 'Mlolongo' },
    { value: 'Katani', label: 'Katani' },
    { value: 'Thindigua', label: 'Thindigua' },
    { value: 'Kihara', label: 'Kihara' },
    { value: 'Juja', label: 'Juja' },
    
    // Other Major Cities
    { value: 'Mombasa CBD', label: 'Mombasa CBD' },
    { value: 'Nyali', label: 'Nyali' },
    { value: 'Bamburi', label: 'Bamburi' },
    { value: 'Kisumu', label: 'Kisumu' },
    { value: 'Nakuru', label: 'Nakuru' },
    { value: 'Eldoret', label: 'Eldoret' },
    { value: 'Thika', label: 'Thika' },
    { value: 'Machakos', label: 'Machakos' },
    { value: 'Meru', label: 'Meru' },
    { value: 'Nyeri', label: 'Nyeri' },
    { value: 'Naivasha', label: 'Naivasha' },
    { value: 'Nanyuki', label: 'Nanyuki' },
    
    // Custom option
    { value: 'Other', label: 'Other (Specify)' }
  ]

  const commonFeatures = [
    'Swimming Pool',
    'Gym',
    'Parking',
    'Security',
    'Garden',
    'Balcony',
    'Air Conditioning',
    'Furnished',
    'WiFi',
    'Elevator',
    'Backup Generator',
    'CCTV',
    'Gated Community',
    'Playground',
    'Shopping Mall Nearby',
    'Hospital Nearby',
    'School Nearby'
  ]

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
    
    // Auto-generate SEO when key fields change and auto-generation is enabled
    if (formData.autoGenerateSEO && ['title', 'area', 'propertyType', 'category', 'price', 'bedrooms'].includes(field)) {
      setTimeout(() => generateSEO(), 100) // Small delay to ensure state is updated
    }
  }

  // EXTENSIVE AI-POWERED SEO GENERATION
  const generateSEO = () => {
    const currentData = { ...formData }
    
    // Smart category and area detection
    const categoryText = currentData.category === 'sale' ? 'For Sale' : currentData.category === 'rent' ? 'For Rent' : 'For Lease'
    const areaText = currentData.area === 'Other' ? currentData.customArea || currentData.city : currentData.area
    const propertyTypeFormatted = currentData.propertyType.charAt(0).toUpperCase() + currentData.propertyType.slice(1)
    const priceFormatted = parseInt(currentData.price || 0).toLocaleString()
    
    // AI-POWERED SEO TITLE GENERATION (Multiple variations)
    const titleVariations = [
      `${currentData.bedrooms}BR ${propertyTypeFormatted} ${categoryText} ${areaText} - KES ${priceFormatted}`,
      `Stunning ${currentData.bedrooms}-Bedroom ${propertyTypeFormatted} in ${areaText} | KES ${priceFormatted}`,
      `Premium ${propertyTypeFormatted} ${categoryText} in ${areaText} - ${currentData.bedrooms} Bedrooms`,
      `${areaText} ${propertyTypeFormatted}: ${currentData.bedrooms}BR ${categoryText} - Best Price KES ${priceFormatted}`,
      `Luxury ${currentData.bedrooms}-Bed ${propertyTypeFormatted} ${categoryText} | Prime ${areaText} Location`
    ]
    const seoTitle = titleVariations.find(title => title.length <= 60) || titleVariations[0].substring(0, 57) + '...'
    
    // AI-POWERED META DESCRIPTION (Compelling and conversion-focused)
    const amenitiesText = currentData.amenities.slice(0, 4).map(a => a.name || a).join(', ')
    const descriptionVariations = [
      `Discover this exceptional ${currentData.bedrooms}-bedroom ${currentData.propertyType} ${categoryText.toLowerCase()} in ${areaText}, Nairobi. ${amenitiesText ? `Premium features: ${amenitiesText}. ` : ''}Prime location, competitive pricing. Schedule viewing today!`,
      `Exclusive ${currentData.bedrooms}BR ${currentData.propertyType} in ${areaText}! ${amenitiesText ? `Includes ${amenitiesText}. ` : ''}Perfect for families. KES ${priceFormatted}. Contact our agents now for instant viewing!`,
      `${areaText}'s finest ${currentData.propertyType}! ${currentData.bedrooms} spacious bedrooms, ${amenitiesText ? `${amenitiesText}, ` : ''}modern amenities. Priced at KES ${priceFormatted}. Don't miss out!`
    ]
    const seoDescription = descriptionVariations.find(desc => desc.length <= 160) || descriptionVariations[0].substring(0, 157) + '...'
    
    // EXTENSIVE KEYWORD RESEARCH & GENERATION
    const primaryKeywords = [
      currentData.propertyType,
      `${currentData.bedrooms} bedroom ${currentData.propertyType}`,
      `${currentData.propertyType} ${areaText}`,
      `${currentData.propertyType} ${categoryText.toLowerCase()}`
    ]
    
    const locationKeywords = [
      areaText,
      `${areaText} property`,
      `${areaText} real estate`,
      `properties in ${areaText}`,
      `${areaText} ${currentData.propertyType}s`,
      `${areaText} housing`
    ]
    
    const intentKeywords = [
      `${currentData.propertyType} ${categoryText.toLowerCase()}`,
      `buy ${currentData.propertyType} ${areaText}`,
      `rent ${currentData.propertyType} ${areaText}`,
      `${currentData.propertyType} prices ${areaText}`,
      `affordable ${currentData.propertyType} ${areaText}`,
      `luxury ${currentData.propertyType} ${areaText}`
    ]
    
    const longTailKeywords = [
      `${currentData.bedrooms} bedroom ${currentData.propertyType} ${categoryText.toLowerCase()} ${areaText}`,
      `best ${currentData.propertyType} deals ${areaText} Nairobi`,
      `${currentData.propertyType} with ${currentData.amenities.slice(0,2).map(a => a.name || a).join(' and ')} ${areaText}`,
      `family ${currentData.propertyType} ${areaText} Kenya`,
      `modern ${currentData.propertyType} ${areaText} ${new Date().getFullYear()}`
    ]
    
    const allKeywords = [...primaryKeywords, ...locationKeywords, ...intentKeywords, ...longTailKeywords]
    const focusKeyword = `${currentData.bedrooms} bedroom ${currentData.propertyType} ${areaText}`
    
    // ADVANCED URL SLUG GENERATION
    const slugBase = `${currentData.propertyType}-${categoryText.replace(/\s+/g, '-')}-${areaText}-${currentData.bedrooms}bedroom`
    const slug = slugBase.toLowerCase()
      .replace(/[^a-z0-9-]/g, '')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
    
    // OPEN GRAPH OPTIMIZATION
    const ogTitle = `${propertyTypeFormatted} ${categoryText} in ${areaText} - KES ${priceFormatted}`
    const ogDescription = `${currentData.bedrooms}-bedroom ${currentData.propertyType} in prime ${areaText} location. ${amenitiesText ? `Features: ${amenitiesText}. ` : ''}Contact us for viewing!`
    
    // TWITTER CARD OPTIMIZATION
    const twitterTitle = `🏠 ${currentData.bedrooms}BR ${propertyTypeFormatted} ${categoryText} | ${areaText}`
    const twitterDescription = `Premium ${currentData.propertyType} in ${areaText}! KES ${priceFormatted}. ${amenitiesText ? `✨ ${amenitiesText.replace(',', ' ✨')} ` : ''}📞 Contact us!`
    
    // CANONICAL URL
    const canonicalUrl = `https://www.palvoria.com/properties/${slug}`
    
    // PRICE RANGE FOR SCHEMA
    const priceAmount = parseInt(currentData.price || 0)
    const priceRangeValue = priceAmount > 50000000 ? 'Luxury' : 
                           priceAmount > 30000000 ? 'High-end' : 
                           priceAmount > 15000000 ? 'Mid-range' : 'Affordable'
    
    // GENERATE SCHEMA MARKUP DATA
    generateSchemaMarkup(currentData, slug, amenitiesText)
    
    // SEO ANALYSIS & SCORING
    const seoAnalysis = analyzeSEO({
      title: seoTitle,
      description: seoDescription,
      keywords: allKeywords,
      focusKeyword,
      content: currentData.description,
      images: existingImages.length + newImages.length
    })
    
    setFormData(prev => ({
      ...prev,
      seoTitle,
      seoDescription,
      seoKeywords: allKeywords.join(', '),
      focusKeyword,
      seoSlug: slug,
      canonicalUrl,
      ogTitle,
      ogDescription,
      twitterTitle,
      twitterDescription,
      priceRange: priceRangeValue,
      seoScore: seoAnalysis.score,
      seoIssues: seoAnalysis.issues,
      seoSuggestions: seoAnalysis.suggestions
    }))
  }

  // ADVANCED SCHEMA MARKUP GENERATION
  const generateSchemaMarkup = (data, slug, amenities) => {
    const schema = {
      "@context": "https://schema.org",
      "@type": "RealEstateListing",
      "name": data.title,
      "description": data.description,
      "url": `https://www.palvoria.com/properties/${slug}`,
      "image": existingImages.length > 0 ? existingImages.map(img => img.url) : [],
      "offers": {
        "@type": "Offer",
        "price": data.price,
        "priceCurrency": data.currency || "KES",
        "availability": "InStock",
        "priceValidUntil": new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      },
      "address": {
        "@type": "PostalAddress",
        "streetAddress": data.address,
        "addressLocality": data.area === 'Other' ? data.customArea : data.area,
        "addressRegion": data.county,
        "addressCountry": "KE"
      },
      "geo": data.coordinates.lat && data.coordinates.lng ? {
        "@type": "GeoCoordinates",
        "latitude": data.coordinates.lat,
        "longitude": data.coordinates.lng
      } : undefined,
      "floorSize": {
        "@type": "QuantitativeValue",
        "value": data.areaSize,
        "unitText": data.areaUnit
      },
      "numberOfRooms": data.bedrooms,
      "numberOfBathroomsTotal": data.bathrooms,
      "yearBuilt": data.yearBuilt,
      "amenityFeature": data.amenities.map(amenity => ({
        "@type": "LocationFeatureSpecification",
        "name": amenity.name || amenity
      }))
    }
    
    // Store schema in form data for backend
    setFormData(prev => ({
      ...prev,
      schemaMarkup: JSON.stringify(schema, null, 2)
    }))
  }

  // ADVANCED SEO ANALYSIS ENGINE
  const analyzeSEO = ({ title, description, keywords, focusKeyword, content, images }) => {
    let score = 0
    const issues = []
    const suggestions = []
    
    // Title Analysis
    if (title.length >= 30 && title.length <= 60) {
      score += 15
    } else if (title.length < 30) {
      issues.push('Title too short')
      suggestions.push('Expand title to 30-60 characters for better SEO')
    } else {
      issues.push('Title too long')
      suggestions.push('Shorten title to under 60 characters')
    }
    
    // Description Analysis
    if (description.length >= 120 && description.length <= 160) {
      score += 15
    } else if (description.length < 120) {
      issues.push('Description too short')
      suggestions.push('Expand description to 120-160 characters')
    } else {
      issues.push('Description too long')
      suggestions.push('Shorten description to under 160 characters')
    }
    
    // Focus Keyword Analysis
    const titleHasFocusKeyword = title.toLowerCase().includes(focusKeyword.toLowerCase())
    const descHasFocusKeyword = description.toLowerCase().includes(focusKeyword.toLowerCase())
    
    if (titleHasFocusKeyword) score += 10
    else suggestions.push('Include focus keyword in title')
    
    if (descHasFocusKeyword) score += 10
    else suggestions.push('Include focus keyword in description')
    
    // Content Analysis
    if (content && content.length > 300) {
      score += 15
      const keywordDensity = (content.toLowerCase().split(focusKeyword.toLowerCase()).length - 1) / content.split(' ').length * 100
      if (keywordDensity >= 0.5 && keywordDensity <= 2.5) {
        score += 10
      } else if (keywordDensity < 0.5) {
        suggestions.push('Increase keyword density in content (aim for 0.5-2.5%)')
      } else {
        suggestions.push('Reduce keyword density to avoid over-optimization')
      }
    } else {
      issues.push('Content too short')
      suggestions.push('Add detailed property description (300+ words)')
    }
    
    // Images Analysis
    if (images > 0) {
      score += 10
      if (images >= 5) score += 5
    } else {
      issues.push('No images')
      suggestions.push('Add high-quality property images')
    }
    
    // Keywords Analysis
    if (keywords.length >= 8) {
      score += 10
    } else {
      suggestions.push('Add more relevant keywords')
    }
    
    // Readability bonus
    if (content && content.split(' ').length > 150) {
      const sentences = content.split(/[.!?]+/).length - 1
      const avgWordsPerSentence = content.split(' ').length / sentences
      if (avgWordsPerSentence <= 20) {
        score += 10
        suggestions.push('Great readability score!')
      } else {
        suggestions.push('Improve readability by using shorter sentences')
      }
    }
    
    return {
      score: Math.min(100, score),
      issues,
      suggestions
    }
  }

  const handleSEOToggle = () => {
    const newAutoGenerate = !formData.autoGenerateSEO
    setFormData(prev => ({
      ...prev,
      autoGenerateSEO: newAutoGenerate
    }))
    
    if (newAutoGenerate) {
      generateSEO()
    }
  }

  // Google Search Preview Component
  const GoogleSearchPreview = () => {
    const displayTitle = formData.seoTitle || formData.title || 'Property Title'
    const displayDescription = formData.seoDescription || formData.description || 'Property description will appear here...'
    const displayUrl = `www.palvoria.com/properties/${formData.seoSlug || 'property-slug'}`
    
    return (
      <div className="bg-white border border-gray-200 rounded-lg p-4">
        <div className="text-xs text-gray-500 mb-2">Google Search Preview</div>
        <div className="space-y-1">
          <div className="text-xs text-green-700">{displayUrl}</div>
          <div className="text-blue-600 text-lg hover:underline cursor-pointer font-medium leading-tight">
            {displayTitle}
          </div>
          <div className="text-sm text-gray-600 leading-snug">
            {displayDescription}
          </div>
        </div>
        <div className="mt-3 text-xs text-gray-400">
          Title: {displayTitle.length}/60 • Description: {displayDescription.length}/160
        </div>
      </div>
    )
  }

  const handleCoordinateChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      coordinates: {
        ...prev.coordinates,
        [field]: value
      }
    }))
  }

  const addAmenity = (amenityName) => {
    if (!formData.amenities.find(a => a.name === amenityName)) {
      setFormData(prev => ({
        ...prev,
        amenities: [...prev.amenities, { name: amenityName, icon: '', description: '' }]
      }))
    }
  }

  const removeAmenity = (amenityName) => {
    setFormData(prev => ({
      ...prev,
      amenities: prev.amenities.filter(a => a.name !== amenityName)
    }))
  }

  const addCustomAmenity = () => {
    if (newFeature.trim() && !formData.amenities.find(a => a.name === newFeature.trim())) {
      addAmenity(newFeature.trim())
      setNewFeature('')
    }
  }

  const handleImageUpload = (event) => {
    const files = Array.from(event.target.files)
    
    console.log('📷 PropertyForm: Selected files:', files)
    
    // Create preview URLs for immediate display
    const previews = files.map(file => URL.createObjectURL(file))
    
    // Add new images to the arrays
    setNewImages(prev => [...prev, ...files])
    setImagePreview(prev => [...prev, ...previews])
    
    console.log('📷 PropertyForm: Updated images array with File objects:', files)
  }

  const removeImage = (index) => {
    const previewToRemove = imagePreview[index]
    const totalExistingImages = existingImages.length
    
    // Clean up blob URLs for new images
    if (previewToRemove && previewToRemove.startsWith('blob:')) {
      URL.revokeObjectURL(previewToRemove)
    }
    
    // Determine if this is an existing image or a new image
    if (index < totalExistingImages) {
      // Removing an existing image
      setExistingImages(prev => prev.filter((_, i) => i !== index))
    } else {
      // Removing a new image
      const newImageIndex = index - totalExistingImages
      setNewImages(prev => prev.filter((_, i) => i !== newImageIndex))
    }
    
    // Remove from preview
    setImagePreview(prev => prev.filter((_, i) => i !== index))
    
    // Adjust primary image index if necessary
    if (index === primaryImageIndex) {
      setPrimaryImageIndex(0) // Set first image as primary
    } else if (index < primaryImageIndex) {
      setPrimaryImageIndex(prev => prev - 1) // Shift primary index back
    }
  }

  const setPrimaryImage = (index) => {
    setPrimaryImageIndex(index)
  }

  const moveImage = (fromIndex, toIndex) => {
    const totalExistingImages = existingImages.length
    const newPreviews = [...imagePreview]
    
    // Move the preview
    const movedPreview = newPreviews.splice(fromIndex, 1)[0]
    newPreviews.splice(toIndex, 0, movedPreview)
    setImagePreview(newPreviews)
    
    // Handle moving within existing images
    if (fromIndex < totalExistingImages && toIndex < totalExistingImages) {
      const newExisting = [...existingImages]
      const movedImage = newExisting.splice(fromIndex, 1)[0]
      newExisting.splice(toIndex, 0, movedImage)
      setExistingImages(newExisting)
    }
    // Handle moving within new images
    else if (fromIndex >= totalExistingImages && toIndex >= totalExistingImages) {
      const newImagesArray = [...newImages]
      const fromNewIndex = fromIndex - totalExistingImages
      const toNewIndex = toIndex - totalExistingImages
      const movedImage = newImagesArray.splice(fromNewIndex, 1)[0]
      newImagesArray.splice(toNewIndex, 0, movedImage)
      setNewImages(newImagesArray)
    }
    // Handle moving between existing and new (complex case)
    else {
      // For simplicity, we'll just update the preview order
      // The backend will handle the final order based on the primary image index
    }
    
    // Update primary image index
    if (fromIndex === primaryImageIndex) {
      setPrimaryImageIndex(toIndex)
    } else if (fromIndex < primaryImageIndex && toIndex >= primaryImageIndex) {
      setPrimaryImageIndex(prev => prev - 1)
    } else if (fromIndex > primaryImageIndex && toIndex <= primaryImageIndex) {
      setPrimaryImageIndex(prev => prev + 1)
    }
  }

  const moveImageUp = (index) => {
    if (index > 0) {
      moveImage(index, index - 1)
    }
  }

  const moveImageDown = (index) => {
    if (index < formData.images.length - 1) {
      moveImage(index, index + 1)
    }
  }

  // Drag and drop handlers
  const handleDragStart = (e, index) => {
    setDraggedIndex(index)
    e.dataTransfer.effectAllowed = 'move'
    e.dataTransfer.setData('text/html', e.target.outerHTML)
    e.target.style.opacity = '0.5'
  }

  const handleDragOver = (e, index) => {
    e.preventDefault()
    e.dataTransfer.dropEffect = 'move'
    setDragOverIndex(index)
  }

  const handleDragEnter = (e, index) => {
    e.preventDefault()
    setDragOverIndex(index)
  }

  const handleDragLeave = (e) => {
    e.preventDefault()
    // Only clear dragOverIndex if we're actually leaving the container
    const rect = e.currentTarget.getBoundingClientRect()
    const x = e.clientX
    const y = e.clientY
    if (x < rect.left || x > rect.right || y < rect.top || y > rect.bottom) {
      setDragOverIndex(null)
    }
  }

  const handleDrop = (e, dropIndex) => {
    e.preventDefault()
    e.target.style.opacity = '1'
    
    if (draggedIndex !== null && draggedIndex !== dropIndex) {
      moveImage(draggedIndex, dropIndex)
    }
    
    setDraggedIndex(null)
    setDragOverIndex(null)
  }

  const handleDragEnd = (e) => {
    e.target.style.opacity = '1'
    setDraggedIndex(null)
    setDragOverIndex(null)
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setSaving(true)

    try {
      // Basic validation
      if (!formData.title || !formData.address || !formData.city || !formData.county || !formData.area || !formData.price) {
        toast.error('Please fill in all required fields: title, address, city, county, area, and price')
        return
      }

      // Additional validation for custom area
      if (formData.area === 'Other' && !formData.customArea) {
        toast.error('Please specify the custom area when "Other" is selected')
        return
      }

      // Transform data to match backend schema
      const transformedData = {
        title: formData.title,
        description: formData.description,
        propertyType: formData.propertyType,
        category: formData.category,
        location: {
          address: formData.address,
          city: formData.city,
          county: formData.county,
          area: formData.area,
          customArea: formData.area === 'Other' ? formData.customArea : undefined,
          neighborhood: formData.neighborhood,
          coordinates: formData.coordinates.lat && formData.coordinates.lng ? {
            latitude: parseFloat(formData.coordinates.lat),
            longitude: parseFloat(formData.coordinates.lng)
          } : undefined
        },
        price: {
          amount: parseFloat(formData.price),
          currency: formData.currency,
          period: formData.category === 'sale' ? 'one-time' : 'month'
        },
        features: {
          bedrooms: parseInt(formData.bedrooms) || 0,
          bathrooms: parseInt(formData.bathrooms) || 0,
          area: formData.areaSize && parseFloat(formData.areaSize) > 0 ? {
            size: parseFloat(formData.areaSize),
            unit: formData.areaUnit
          } : undefined
        },
        amenities: formData.amenities,
        status: formData.status,
        featured: formData.featured,
        ...(formData.yearBuilt && formData.yearBuilt !== '' ? { yearBuilt: parseInt(formData.yearBuilt) } : {}),
        // SEO Data - use new SEO manager data if available, fallback to form data
        seo: seoData || {
          metaTitle: formData.seoTitle,
          metaDescription: formData.seoDescription,
          keywords: formData.seoKeywords ? formData.seoKeywords.split(',').map(k => k.trim()).filter(k => k) : [],
          focusKeyword: formData.focusKeyword,
          slug: formData.seoSlug,
          canonicalUrl: formData.canonicalUrl,
          ogTitle: formData.ogTitle,
          ogDescription: formData.ogDescription,
          ogImage: formData.ogImage,
          twitterTitle: formData.twitterTitle,
          twitterDescription: formData.twitterDescription,
          twitterImage: formData.twitterImage,
          autoGenerated: formData.autoGenerateSEO
        },
        // Include image data for the backend
        existingImages: existingImages.map((img, index) => ({
          ...img,
          order: index,
          isPrimary: index === primaryImageIndex && primaryImageIndex < existingImages.length
        })),
        newImages: newImages, // New images to upload
        primaryImageIndex: primaryImageIndex, // Overall primary image index
        owner: '507f1f77bcf86cd799439011', // Temporary owner ID
      }
      
      console.log('Form Data:', formData)
      console.log('Transformed Data:', transformedData)

      await onSave(transformedData)
      toast.success(property ? 'Property updated successfully!' : 'Property created successfully!')
      
      // Only close form on successful save - onCancel will be called by parent component
      
    } catch (error) {
      console.error('Error saving property:', error)
      
      // Parse error message for better user feedback
      let errorMessage = 'Failed to save property. Please try again.'
      if (error.message && error.message.includes('Validation error')) {
        try {
          const errorData = JSON.parse(error.message.split(' - ')[1])
          if (errorData.errors && errorData.errors.length > 0) {
            errorMessage = `Validation Error: ${errorData.errors.join(', ')}`
          }
        } catch (parseError) {
          // Use default message if parsing fails
        }
      }
      
      toast.error(errorMessage)
      // Don't close the form - keep user's data intact
    } finally {
      setSaving(false)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        className="bg-gray-900 rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden border border-gray-700"
      >
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <h2 className="text-2xl font-bold text-white">
            {property ? 'Edit Property' : 'Add New Property'}
          </h2>
          <button
            onClick={onCancel}
            className="text-gray-400 hover:text-gray-200"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="overflow-y-auto max-h-[calc(90vh-140px)]">
          <div className="p-6 space-y-8">
            {/* Basic Information */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Basic Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Property Title *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.title}
                    onChange={(e) => handleInputChange('title', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="e.g., 4BR Villa in Karen with Swimming Pool"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Property Type *
                  </label>
                  <select
                    value={formData.propertyType}
                    onChange={(e) => handleInputChange('propertyType', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  >
                    {propertyTypes.map(type => (
                      <option key={type.value} value={type.value}>{type.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Category *
                  </label>
                  <select
                    value={formData.category}
                    onChange={(e) => handleInputChange('category', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  >
                    {propertyCategories.map(category => (
                      <option key={category.value} value={category.value}>{category.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Status
                  </label>
                  <select
                    value={formData.status}
                    onChange={(e) => handleInputChange('status', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  >
                    {propertyStatuses.map(status => (
                      <option key={status.value} value={status.value}>{status.label}</option>
                    ))}
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Address *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.address}
                    onChange={(e) => handleInputChange('address', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="e.g., 123 Karen Road"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    City *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.city}
                    onChange={(e) => handleInputChange('city', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="e.g., Nairobi"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    County *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.county}
                    onChange={(e) => handleInputChange('county', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="e.g., Nairobi"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Area/Location *
                  </label>
                  <select
                    required
                    value={formData.area}
                    onChange={(e) => handleInputChange('area', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white"
                  >
                    <option value="">Select Area</option>
                    {nairobiAreas.map(area => (
                      <option key={area.value} value={area.value}>{area.label}</option>
                    ))}
                  </select>
                </div>

                {formData.area === 'Other' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Custom Area *
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.customArea}
                      onChange={(e) => handleInputChange('customArea', e.target.value)}
                      className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                      placeholder="Enter custom area/neighborhood"
                    />
                  </div>
                )}

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Neighborhood (Optional)
                  </label>
                  <input
                    type="text"
                    value={formData.neighborhood}
                    onChange={(e) => handleInputChange('neighborhood', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="Specific neighborhood within the area"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Price *
                  </label>
                  <input
                    type="number"
                    required
                    value={formData.price}
                    onChange={(e) => handleInputChange('price', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="e.g., 65000000"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Currency
                  </label>
                  <select
                    value={formData.currency}
                    onChange={(e) => handleInputChange('currency', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  >
                    {currencies.map(currency => (
                      <option key={currency.value} value={currency.value}>{currency.label}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Property Details */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Property Details</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Bedrooms
                  </label>
                  <input
                    type="number"
                    min="0"
                    value={formData.bedrooms}
                    onChange={(e) => handleInputChange('bedrooms', parseInt(e.target.value) || 0)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Bathrooms
                  </label>
                  <input
                    type="number"
                    min="0"
                    value={formData.bathrooms}
                    onChange={(e) => handleInputChange('bathrooms', parseInt(e.target.value) || 0)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Area Size
                  </label>
                  <input
                    type="number"
                    value={formData.area}
                    onChange={(e) => handleInputChange('area', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="e.g., 2500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Area Unit
                  </label>
                  <select
                    value={formData.areaUnit}
                    onChange={(e) => handleInputChange('areaUnit', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  >
                    <option value="sqft">Square Feet</option>
                    <option value="sqm">Square Meters</option>
                    <option value="acres">Acres</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Year Built
                  </label>
                  <input
                    type="number"
                    min="1900"
                    max={new Date().getFullYear()}
                    value={formData.yearBuilt}
                    onChange={(e) => handleInputChange('yearBuilt', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  />
                </div>
              </div>
            </div>

            {/* Description */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Description</h3>
              <textarea
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                rows={5}
                className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                placeholder="Describe the property, its unique features, neighborhood, and any other relevant information..."
              />
            </div>

            {/* Amenities */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Amenities</h3>
              
              {/* Selected Amenities */}
              {formData.amenities.length > 0 && (
                <div className="mb-4">
                  <h4 className="text-sm font-medium text-gray-300 mb-2">Selected Amenities:</h4>
                  <div className="flex flex-wrap gap-2">
                    {formData.amenities.map((amenity, index) => (
                      <span
                        key={index}
                        className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-yellow-200 text-black"
                      >
                        {amenity.name}
                        <button
                          type="button"
                          onClick={() => removeAmenity(amenity.name)}
                          className="ml-2 hover:text-red-600"
                        >
                          <XMarkIcon className="h-4 w-4" />
                        </button>
                      </span>
                    ))}
                  </div>
                </div>
              )}

              {/* Common Amenities */}
              <div className="mb-4">
                <h4 className="text-sm font-medium text-gray-300 mb-2">Common Amenities:</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {commonFeatures.map((amenity) => (
                    <button
                      key={amenity}
                      type="button"
                      onClick={() => addAmenity(amenity)}
                      disabled={formData.amenities.find(a => a.name === amenity)}
                      className={`text-left px-3 py-2 text-sm rounded-lg border ${
                        formData.amenities.find(a => a.name === amenity)
                          ? 'border-yellow-400 bg-yellow-900 text-yellow-300'
                          : 'border-gray-600 text-gray-300 hover:border-yellow-400 hover:bg-gray-700'
                      }`}
                    >
                      {amenity}
                    </button>
                  ))}
                </div>
              </div>

              {/* Custom Amenity */}
              <div className="flex gap-2">
                <input
                  type="text"
                  value={newFeature}
                  onChange={(e) => setNewFeature(e.target.value)}
                  className="flex-1 px-4 py-2 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                  placeholder="Add custom amenity..."
                />
                <button
                  type="button"
                  onClick={addCustomAmenity}
                  className="btn-primary px-4 py-2 flex items-center"
                >
                  <PlusIcon className="h-4 w-4 mr-1" />
                  Add
                </button>
              </div>
            </div>

            {/* Images */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Property Images</h3>
              
              {/* Image Upload */}
              <div className="mb-4">
                <input
                  ref={fileInputRef}
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                />
                <button
                  type="button"
                  onClick={() => fileInputRef.current?.click()}
                  className="w-full border-2 border-dashed border-gray-600 rounded-lg p-8 text-center hover:border-yellow-400 hover:bg-gray-800 transition-colors"
                >
                  <PhotoIcon className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                  <p className="text-gray-300">Click to upload property images</p>
                  <p className="text-sm text-gray-400">PNG, JPG, GIF up to 10MB each</p>
                </button>
              </div>

              {/* Image Preview */}
              {imagePreview.length > 0 && (
                <div>
                  <div className="mb-4">
                    <h4 className="text-sm font-medium text-gray-300 mb-2">
                      Arrange images and select primary image
                    </h4>
                    <p className="text-xs text-gray-400">
                      The primary image (marked with ⭐) will be shown first in listings. 
                      <span className="text-yellow-400 ml-1">Drag & drop to reorder</span>
                    </p>
                    {existingImages.length > 0 && (
                      <p className="text-xs text-gray-400 mt-1">
                        <span className="text-green-400">• Existing images</span>
                        {newImages.length > 0 && <span className="ml-3 text-blue-400">• New images</span>}
                      </p>
                    )}
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {imagePreview.map((previewUrl, index) => (
                      <motion.div 
                        key={index} 
                        layout
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.2 }}
                        className={`relative group border-2 rounded-lg cursor-move transition-all duration-200 ${
                          index === primaryImageIndex 
                            ? 'border-yellow-400 bg-yellow-50/10 shadow-lg shadow-yellow-400/20' 
                            : dragOverIndex === index
                            ? 'border-blue-400 bg-blue-50/10 shadow-lg shadow-blue-400/20'
                            : draggedIndex === index
                            ? 'border-gray-400 opacity-50 scale-95'
                            : 'border-gray-600 hover:border-gray-500'
                        }`}
                        draggable
                        onDragStart={(e) => handleDragStart(e, index)}
                        onDragOver={(e) => handleDragOver(e, index)}
                        onDragEnter={(e) => handleDragEnter(e, index)}
                        onDragLeave={handleDragLeave}
                        onDrop={(e) => handleDrop(e, index)}
                        onDragEnd={handleDragEnd}
                      >
                        <img
                          src={previewUrl}
                          alt={`Property ${index + 1}`}
                          className="w-full h-32 object-cover rounded-lg pointer-events-none"
                        />
                        
                        {/* Drag Handle */}
                        <div className="absolute top-2 left-2 bg-black/70 text-white p-1 rounded opacity-0 group-hover:opacity-100 transition-opacity">
                          <Bars3Icon className="h-3 w-3" />
                        </div>
                        
                        {/* Primary Image Badge */}
                        {index === primaryImageIndex && (
                          <motion.div 
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className="absolute top-2 left-8 bg-yellow-400 text-black px-2 py-1 rounded-full text-xs font-medium flex items-center"
                          >
                            <StarSolidIcon className="h-3 w-3 mr-1" />
                            Primary
                          </motion.div>
                        )}
                        
                        {/* Drop Zone Indicator */}
                        {dragOverIndex === index && draggedIndex !== index && (
                          <div className="absolute inset-0 bg-blue-400/20 border-2 border-dashed border-blue-400 rounded-lg flex items-center justify-center">
                            <div className="bg-blue-500 text-white px-2 py-1 rounded text-xs font-medium">
                              Drop here
                            </div>
                          </div>
                        )}
                        
                        {/* Image Controls */}
                        <div className="absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                          {/* Set as Primary */}
                          {index !== primaryImageIndex && (
                            <motion.button
                              whileHover={{ scale: 1.1 }}
                              whileTap={{ scale: 0.9 }}
                              type="button"
                              onClick={() => setPrimaryImage(index)}
                              className="bg-yellow-500 text-white rounded-full p-1 hover:bg-yellow-600 transition-colors shadow-lg"
                              title="Set as primary image"
                            >
                              <StarIcon className="h-3 w-3" />
                            </motion.button>
                          )}
                          
                          {/* Move Up */}
                          {index > 0 && (
                            <motion.button
                              whileHover={{ scale: 1.1 }}
                              whileTap={{ scale: 0.9 }}
                              type="button"
                              onClick={() => moveImageUp(index)}
                              className="bg-blue-500 text-white rounded-full p-1 hover:bg-blue-600 transition-colors shadow-lg"
                              title="Move up"
                            >
                              <ArrowUpIcon className="h-3 w-3" />
                            </motion.button>
                          )}
                          
                          {/* Move Down */}
                          {index < imagePreview.length - 1 && (
                            <motion.button
                              whileHover={{ scale: 1.1 }}
                              whileTap={{ scale: 0.9 }}
                              type="button"
                              onClick={() => moveImageDown(index)}
                              className="bg-blue-500 text-white rounded-full p-1 hover:bg-blue-600 transition-colors shadow-lg"
                              title="Move down"
                            >
                              <ArrowDownIcon className="h-3 w-3" />
                            </motion.button>
                          )}
                          
                          {/* Remove */}
                          <motion.button
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            type="button"
                            onClick={() => removeImage(index)}
                            className="bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors shadow-lg"
                            title="Remove image"
                          >
                            <XMarkIcon className="h-3 w-3" />
                          </motion.button>
                        </div>
                        
                        {/* Image Number and Status */}
                        <div className="absolute bottom-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs">
                          {index + 1} of {imagePreview.length}
                          {index < existingImages.length && (
                            <span className="ml-1 text-green-400">•</span>
                          )}
                          {index >= existingImages.length && (
                            <span className="ml-1 text-blue-400">•</span>
                          )}
                        </div>
                      </motion.div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Location & Coordinates */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Location Details</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Latitude
                  </label>
                  <input
                    type="text"
                    value={formData.coordinates.lat}
                    onChange={(e) => handleCoordinateChange('lat', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="-1.2921"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Longitude
                  </label>
                  <input
                    type="text"
                    value={formData.coordinates.lng}
                    onChange={(e) => handleCoordinateChange('lng', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="36.8219"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Virtual Tour URL
                  </label>
                  <input
                    type="url"
                    value={formData.virtualTourUrl}
                    onChange={(e) => handleInputChange('virtualTourUrl', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="https://..."
                  />
                </div>
              </div>
            </div>

            {/* Agent Contact */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Agent Contact</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Agent Name
                  </label>
                  <input
                    type="text"
                    value={formData.contactAgent}
                    onChange={(e) => handleInputChange('contactAgent', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="Agent Name"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Agent Phone
                  </label>
                  <input
                    type="tel"
                    value={formData.agentPhone}
                    onChange={(e) => handleInputChange('agentPhone', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="+254-700-123-456"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Agent Email
                  </label>
                  <input
                    type="email"
                    value={formData.agentEmail}
                    onChange={(e) => handleInputChange('agentEmail', e.target.value)}
                    className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 text-white placeholder-gray-400"
                    placeholder="agent@palvoriaproperties.com"
                  />
                </div>
              </div>
            </div>

            {/* Options */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">Additional Options</h3>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="featured"
                  checked={formData.featured}
                  onChange={(e) => handleInputChange('featured', e.target.checked)}
                  className="h-4 w-4 text-yellow-400 focus:ring-yellow-400 border-gray-600 bg-gray-800 rounded"
                />
                <label htmlFor="featured" className="ml-2 block text-sm text-gray-300">
                  Mark as Featured Property
                </label>
              </div>
            </div>

            {/* SEO Management */}
            <div>
              <h3 className="text-lg font-medium text-white mb-4">SEO Management</h3>
              <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <SEOManager 
                  property={{
                    ...formData,
                    location: {
                      address: formData.address,
                      city: formData.city,
                      county: formData.county,
                      area: formData.area,
                      customArea: formData.customArea
                    },
                    price: {
                      amount: parseFloat(formData.price) || 0,
                      currency: formData.currency
                    },
                    features: {
                      bedrooms: formData.bedrooms,
                      bathrooms: formData.bathrooms,
                      area: {
                        size: parseFloat(formData.areaSize) || 0,
                        unit: formData.areaUnit
                      }
                    },
                    images: imagePreview.map((url, index) => ({
                      url,
                      isPrimary: index === primaryImageIndex
                    })),
                    amenities: formData.amenities
                  }}
                  onSEOChange={(seoData) => setSeoData(seoData)}
                  autoGenerate={true}
                />
                
                <div className="mt-6">
                  <GoogleSearchPreview 
                    property={{
                      ...formData,
                      location: {
                        address: formData.address,
                        city: formData.city,
                        county: formData.county,
                        area: formData.area,
                        customArea: formData.customArea
                      },
                      price: {
                        amount: parseFloat(formData.price) || 0,
                        currency: formData.currency
                      },
                      features: {
                        bedrooms: formData.bedrooms,
                        bathrooms: formData.bathrooms
                      },
                      images: imagePreview.map((url, index) => ({
                        url,
                        isPrimary: index === primaryImageIndex
                      }))
                    }}
                    seo={seoData}
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-end space-x-4 p-6 border-t border-gray-700 bg-gray-800">
            <button
              type="button"
              onClick={onCancel}
              className="btn-secondary"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={saving}
              className="btn-primary"
            >
              {saving ? 'Saving...' : property ? 'Update Property' : 'Add Property'}
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  )
}

export default PropertyForm
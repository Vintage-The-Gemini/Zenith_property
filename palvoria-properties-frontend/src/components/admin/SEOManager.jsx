import React, { useState, useEffect } from 'react';
import { Search, Eye, AlertCircle, CheckCircle, TrendingUp, Globe } from 'lucide-react';
import SEOToolsPanel from './SEOToolsPanel';

const SEOManager = ({ property, onSEOChange, autoGenerate = true }) => {
  const [seoData, setSeoData] = useState({
    metaTitle: '',
    metaDescription: '',
    keywords: [],
    focusKeyword: '',
    slug: '',
    canonicalUrl: '',
    ogTitle: '',
    ogDescription: '',
    ogImage: '',
    twitterTitle: '',
    twitterDescription: '',
    twitterImage: '',
    autoGenerated: true,
    ...property?.seo
  });

  const [keywordInput, setKeywordInput] = useState('');
  const [seoScore, setSeoScore] = useState(0);
  const [seoIssues, setSeoIssues] = useState([]);
  const [showPreview, setShowPreview] = useState(false);

  // Auto-generate ALL SEO content based on property details
  const generateSEOContent = () => {
    if (!property) return;

    const { title, description, propertyType, category, location, price, features, images } = property;
    const area = location.area === 'Other' ? location.customArea : location.area;
    const primaryImage = images?.find(img => img.isPrimary) || images?.[0];
    
    // Generate meta title variations (max 60 chars)
    const titleVariations = [
      `${features?.bedrooms}BR ${propertyType} for ${category} in ${area} - ${price?.currency} ${price?.amount?.toLocaleString()}`,
      `Premium ${propertyType} ${category} in ${area} | ${features?.bedrooms} Bedrooms`,
      `${area} ${propertyType} for ${category} - KES ${price?.amount?.toLocaleString()}`,
      `${propertyType} for ${category} ${area}, ${location.city} Kenya`
    ];
    const metaTitle = titleVariations.find(t => t.length <= 60) || titleVariations[0].substring(0, 57) + '...';
    
    // Generate comprehensive meta description (max 160 chars)
    const highlights = [];
    if (features?.bedrooms) highlights.push(`${features.bedrooms} bedroom`);
    if (features?.bathrooms) highlights.push(`${features.bathrooms} bathroom`);
    if (features?.area?.size) highlights.push(`${features.area.size}${features.area.unit}`);
    
    const descriptionVariations = [
      `${highlights.join(', ')} ${propertyType} for ${category} in prime ${area}, ${location.city}. Modern amenities, excellent location. Contact us for viewing today!`,
      `Discover this exceptional ${propertyType} in ${area}! ${highlights.join(' • ')}. Perfect for families. KES ${price?.amount?.toLocaleString()}. Schedule viewing now!`,
      `Premium ${area} ${propertyType} for ${category}. ${highlights.join(', ')}. Prime location, competitive pricing at KES ${price?.amount?.toLocaleString()}.`
    ];
    const metaDescription = descriptionVariations.find(d => d.length <= 160) || descriptionVariations[0].substring(0, 157) + '...';
    
    // Generate extensive keywords
    const keywords = [
      // Primary keywords
      propertyType,
      category,
      area,
      location.city,
      
      // Combination keywords
      `${propertyType} ${category}`,
      `${area} ${propertyType}`,
      `${propertyType} in ${area}`,
      `${location.city} ${propertyType}`,
      
      // Feature-based keywords
      `${features?.bedrooms} bedroom ${propertyType}`,
      `${features?.bathrooms} bathroom ${propertyType}`,
      
      // Long-tail keywords
      `${propertyType} for ${category} ${area}`,
      `${area} property for ${category}`,
      `best ${propertyType} in ${area}`,
      `affordable ${propertyType} ${location.city}`,
      
      // General real estate keywords
      'property',
      'real estate',
      'Kenya property',
      `${location.city} property`,
      'property listing',
      'real estate Kenya'
    ].filter(Boolean).slice(0, 15);
    
    // Generate slug
    const slug = `${propertyType}-${category}-${area}-${features?.bedrooms || ''}br-${Date.now()}`.toLowerCase()
      .replace(/[^a-z0-9-]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
    
    // Generate focus keyword
    const focusKeyword = `${features?.bedrooms} bedroom ${propertyType} for ${category} in ${area}`;
    
    // Generate canonical URL
    const canonicalUrl = `https://www.palvoria.com/property/${slug}`;
    
    // Generate Open Graph data
    const ogTitle = `${propertyType.charAt(0).toUpperCase() + propertyType.slice(1)} for ${category} in ${area} - KES ${price?.amount?.toLocaleString()}`;
    const ogDescription = `${highlights.join(' • ')} ${propertyType} in premium ${area} location. Modern amenities, excellent connectivity. View this property today!`;
    const ogImage = primaryImage?.url || '/images/default-property.jpg';
    
    // Generate Twitter Card data
    const twitterTitle = `🏠 ${features?.bedrooms}BR ${propertyType.charAt(0).toUpperCase() + propertyType.slice(1)} | ${area}`;
    const twitterDescription = `Premium ${area} ${propertyType} for ${category}! KES ${price?.amount?.toLocaleString()} ✨ ${highlights.join(' ✨ ')} 📞 Contact us now!`;
    const twitterImage = primaryImage?.url || '/images/default-property.jpg';

    setSeoData(prev => ({
      ...prev,
      metaTitle,
      metaDescription,
      keywords,
      focusKeyword,
      slug,
      canonicalUrl,
      ogTitle,
      ogDescription,
      ogImage,
      twitterTitle,
      twitterDescription,
      twitterImage,
      autoGenerated: true,
      lastOptimized: new Date()
    }));
  };

  // Calculate SEO score
  const calculateSEOScore = () => {
    let score = 0;
    const issues = [];

    // Meta title checks
    if (seoData.metaTitle) {
      score += 15;
      if (seoData.metaTitle.length > 60) {
        issues.push('Meta title exceeds 60 characters');
      } else if (seoData.metaTitle.length < 30) {
        issues.push('Meta title is too short (minimum 30 characters)');
      } else {
        score += 10;
      }
    } else {
      issues.push('Meta title is missing');
    }

    // Meta description checks
    if (seoData.metaDescription) {
      score += 15;
      if (seoData.metaDescription.length > 160) {
        issues.push('Meta description exceeds 160 characters');
      } else if (seoData.metaDescription.length < 120) {
        issues.push('Meta description could be longer for better results');
      } else {
        score += 10;
      }
    } else {
      issues.push('Meta description is missing');
    }

    // Focus keyword checks
    if (seoData.focusKeyword) {
      score += 10;
      const titleIncludesKeyword = seoData.metaTitle.toLowerCase().includes(seoData.focusKeyword.toLowerCase());
      const descriptionIncludesKeyword = seoData.metaDescription.toLowerCase().includes(seoData.focusKeyword.toLowerCase());
      
      if (titleIncludesKeyword && descriptionIncludesKeyword) {
        score += 15;
      } else if (titleIncludesKeyword || descriptionIncludesKeyword) {
        score += 8;
        issues.push('Focus keyword should appear in both title and description');
      } else {
        issues.push('Focus keyword not found in title or description');
      }
    } else {
      issues.push('Focus keyword is missing');
    }

    // Keywords check
    if (seoData.keywords.length > 0) {
      score += 10;
      if (seoData.keywords.length > 10) {
        issues.push('Too many keywords (maximum 10 recommended)');
      }
    } else {
      issues.push('No keywords defined');
    }

    // Slug check
    if (seoData.slug) {
      score += 10;
      if (seoData.slug.includes(' ')) {
        issues.push('URL slug contains spaces');
      }
    } else {
      issues.push('URL slug is missing');
    }

    // Social media checks
    if (seoData.ogTitle && seoData.ogDescription) {
      score += 10;
    } else {
      issues.push('Open Graph tags incomplete');
    }

    if (seoData.twitterTitle && seoData.twitterDescription) {
      score += 5;
    }

    setSeoScore(score);
    setSeoIssues(issues);
  };

  useEffect(() => {
    if (autoGenerate && property && !seoData.metaTitle) {
      generateSEOContent();
    }
  }, [property, autoGenerate]);

  useEffect(() => {
    calculateSEOScore();
  }, [seoData]);

  useEffect(() => {
    onSEOChange?.(seoData);
  }, [seoData, onSEOChange]);

  const handleInputChange = (field, value) => {
    setSeoData(prev => ({
      ...prev,
      [field]: value,
      autoGenerated: false,
      lastOptimized: new Date()
    }));
  };

  const addKeyword = () => {
    if (keywordInput.trim() && !seoData.keywords.includes(keywordInput.trim())) {
      setSeoData(prev => ({
        ...prev,
        keywords: [...prev.keywords, keywordInput.trim()]
      }));
      setKeywordInput('');
    }
  };

  const removeKeyword = (keyword) => {
    setSeoData(prev => ({
      ...prev,
      keywords: prev.keywords.filter(k => k !== keyword)
    }));
  };

  const getSEOScoreColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-gray-800">SEO Management</h3>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <TrendingUp className="h-5 w-5 text-gray-500" />
            <span className="text-sm text-gray-600">SEO Score:</span>
            <span className={`text-sm font-semibold ${getSEOScoreColor(seoScore)}`}>
              {seoScore}/100
            </span>
          </div>
          <button
            onClick={() => setShowPreview(!showPreview)}
            className="flex items-center space-x-1 px-3 py-1 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors"
          >
            <Eye className="h-4 w-4" />
            <span className="text-sm">Preview</span>
          </button>
        </div>
      </div>

      {/* SEO Issues */}
      {seoIssues.length > 0 && (
        <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
          <div className="flex items-center mb-2">
            <AlertCircle className="h-5 w-5 text-yellow-600 mr-2" />
            <h4 className="text-sm font-medium text-yellow-800">SEO Recommendations</h4>
          </div>
          <ul className="text-sm text-yellow-700 space-y-1">
            {seoIssues.map((issue, index) => (
              <li key={index}>• {issue}</li>
            ))}
          </ul>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Left Column - Basic SEO */}
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Meta Title
              <span className="text-gray-500 ml-1">({seoData.metaTitle.length}/60)</span>
            </label>
            <input
              type="text"
              value={seoData.metaTitle}
              onChange={(e) => handleInputChange('metaTitle', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
              placeholder="Enter meta title..."
              maxLength={60}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Meta Description
              <span className="text-gray-500 ml-1">({seoData.metaDescription.length}/160)</span>
            </label>
            <textarea
              value={seoData.metaDescription}
              onChange={(e) => handleInputChange('metaDescription', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 h-20 text-gray-900"
              placeholder="Enter meta description..."
              maxLength={160}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Focus Keyword
            </label>
            <input
              type="text"
              value={seoData.focusKeyword}
              onChange={(e) => handleInputChange('focusKeyword', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
              placeholder="e.g., apartment for rent in Westlands"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL Slug
            </label>
            <input
              type="text"
              value={seoData.slug}
              onChange={(e) => handleInputChange('slug', e.target.value.toLowerCase().replace(/\s+/g, '-'))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
              placeholder="property-url-slug"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Keywords
            </label>
            <div className="flex space-x-2 mb-2">
              <input
                type="text"
                value={keywordInput}
                onChange={(e) => setKeywordInput(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
                placeholder="Add keyword..."
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addKeyword())}
              />
              <button
                onClick={addKeyword}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                Add
              </button>
            </div>
            <div className="flex flex-wrap gap-2">
              {seoData.keywords.map((keyword, index) => (
                <span
                  key={index}
                  className="inline-flex items-center px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded-md"
                >
                  {keyword}
                  <button
                    onClick={() => removeKeyword(keyword)}
                    className="ml-1 text-gray-500 hover:text-red-500"
                  >
                    ×
                  </button>
                </span>
              ))}
            </div>
          </div>
        </div>

        {/* Right Column - Social Media & Advanced */}
        <div className="space-y-4">
          <h4 className="text-lg font-medium text-gray-800 border-b pb-2">Social Media</h4>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Open Graph Title
            </label>
            <input
              type="text"
              value={seoData.ogTitle}
              onChange={(e) => handleInputChange('ogTitle', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
              placeholder="Facebook/LinkedIn title"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Open Graph Description
            </label>
            <textarea
              value={seoData.ogDescription}
              onChange={(e) => handleInputChange('ogDescription', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 h-16"
              placeholder="Facebook/LinkedIn description"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Twitter Title
            </label>
            <input
              type="text"
              value={seoData.twitterTitle}
              onChange={(e) => handleInputChange('twitterTitle', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
              placeholder="Twitter title"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Twitter Description
            </label>
            <textarea
              value={seoData.twitterDescription}
              onChange={(e) => handleInputChange('twitterDescription', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 h-16"
              placeholder="Twitter description"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Canonical URL
            </label>
            <input
              type="url"
              value={seoData.canonicalUrl}
              onChange={(e) => handleInputChange('canonicalUrl', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-900"
              placeholder="https://www.palvoria.com/property/..."
            />
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="flex justify-between items-center mt-6 pt-4 border-t">
        <button
          onClick={generateSEOContent}
          className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
        >
          <Search className="h-4 w-4" />
          <span>Auto-Generate SEO</span>
        </button>

        <div className="flex items-center space-x-2 text-sm text-gray-500">
          {seoData.autoGenerated && (
            <span className="flex items-center space-x-1">
              <CheckCircle className="h-4 w-4 text-green-500" />
              <span>Auto-generated</span>
            </span>
          )}
          {seoData.lastOptimized && (
            <span>Last updated: {new Date(seoData.lastOptimized).toLocaleDateString()}</span>
          )}
        </div>
      </div>

      {/* Google Search Preview */}
      {showPreview && (
        <div className="mt-6 p-4 bg-gray-50 rounded-md">
          <h4 className="text-lg font-medium text-gray-800 mb-3 flex items-center">
            <Globe className="h-5 w-5 mr-2" />
            Google Search Preview
          </h4>
          <div className="bg-white p-4 rounded-md border max-w-2xl">
            <div className="text-blue-600 text-lg hover:underline cursor-pointer">
              {seoData.metaTitle || 'Property Title'}
            </div>
            <div className="text-green-700 text-sm">
              {seoData.canonicalUrl || `https://www.palvoria.com/property/${seoData.slug || 'property-slug'}`}
            </div>
            <div className="text-gray-700 text-sm mt-1">
              {seoData.metaDescription || 'Property description will appear here...'}
            </div>
          </div>
        </div>
      )}

      {/* SEO Tools Panel */}
      <div className="mt-8">
        <SEOToolsPanel 
          property={property}
          seo={seoData}
          onRecommendationsUpdate={(recommendations) => {
            console.log('SEO Recommendations:', recommendations);
          }}
        />
      </div>
    </div>
  );
};

export default SEOManager;